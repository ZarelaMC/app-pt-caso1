name: Análisis CI con SonarCloud y Deploy S3

on:
  push:
    branches:
      - master
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Descargar el código del repositorio
        uses: actions/checkout@v3  # ✅ Versión actualizada
        with:
          fetch-depth: 0

      - name: 🔧 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 📦 Instalar dependencias
        run: npm ci  # 🔐 Instalación segura con package-lock.json

      - name: 🧪 Ejecutar pruebas con Karma y Jasmine - generación de coverage
        run: |
          npm run test -- --no-watch --code-coverage --browsers=ChromeHeadless  # 📊 Genera reporte de cobertura

      - name: 🔍 Escanear código con SonarCloud
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

      - name: 🛑 Verificar resultado de SonarCloud
        id: sonarcloud-check
        run: |
          SONAR_PROJECT_KEY=${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}
          SONAR_URL="https://sonarcloud.io/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}"

          RESPONSE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_URL}")
          STATUS=$(echo "${RESPONSE}" | jq -r '.projectStatus.status')

          if [ "${STATUS}" == "OK" ]; then
            echo "✅ El análisis de SonarCloud ha pasado correctamente."
          else
            echo "❌ El análisis de SonarCloud ha fallado."
            echo "Detalles del fallo:"
            echo "${RESPONSE}" | jq '.projectStatus.conditions'
            exit 1  # 💥 Fuerza el fallo del job
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: sonarqube  # ⛓️ Ejecuta solo si SonarQube pasa
    steps:
      - name: 📥 Acceder al repositorio
        uses: actions/checkout@v3  # 🔄 Versión consistente

      - name: 📦 Instalar dependencias
        run: npm install  # 🧩 Instala todas las dependencias

      - name: 🛠️ Compilar proyecto (npm run build)
        run: npm run build  # 🏗️ Genera archivos de producción

      - name: 🚀 Sincronizar con S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete  # 🔒 Permisos públicos
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'sa-east-1'
          SOURCE_DIR: build

      - name: ✅ Validar despliegue en S3
        if: success()  # 🎯 Solo si el paso anterior fue exitoso
        run: |
          echo "¡Despliegue exitoso! 🎉"
          echo "Todos los archivos se han subido al bucket: ${{ secrets.AWS_S3_BUCKET }}"
          echo "Puedes acceder a tu aplicación en: http://${{ secrets.AWS_S3_BUCKET }}.s3-website.sa-east-1.amazonaws.com"

      - name: 🚨 Manejar errores de despliegue
        if: failure()  # 🔥 Solo si hay fallos
        run: |
          echo "❌ Error al subir archivos a S3"
          echo "Verifica:"
          echo "1. Credenciales de AWS en Secrets 🗝️"
          echo "2. Nombre del bucket S3"
          echo "3. Permisos del bucket (reglas de acceso)🔓"