name: An√°lisis CI con SonarCloud y Deploy (CD) S3 

on:
  push:
    branches:
      - master
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: üì• Descargar el c√≥digo del repositorio
        uses: actions/checkout@v3  # ‚úÖ Versi√≥n actualizada
        with:
          fetch-depth: 0

      - name: üîß Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üì¶ Instalar dependencias
        run: npm ci  # üîê Instalaci√≥n segura con package-lock.json

      - name: üõ†Ô∏è Dar permisos a Karma
        run: chmod +x node_modules/.bin/karma

      - name: üß™ Ejecutar pruebas con Karma y Jasmine - generaci√≥n de coverage
        run: |
          npm run test -- --no-watch --code-coverage --browsers=ChromeHeadless  # üìä Genera reporte de cobertura

      - name: üîç Escanear c√≥digo con SonarCloud
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

      - name: üõë Verificar resultado de SonarCloud
        id: sonarcloud-check
        run: |
          SONAR_PROJECT_KEY=${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}
          SONAR_URL="https://sonarcloud.io/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}"

          RESPONSE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_URL}")
          STATUS=$(echo "${RESPONSE}" | jq -r '.projectStatus.status')

          if [ "${STATUS}" == "OK" ]; then
            echo "‚úÖ El an√°lisis de SonarCloud ha pasado correctamente."
          else
            echo "‚ùå El an√°lisis de SonarCloud ha fallado."
            echo "Detalles del fallo:"
            echo "${RESPONSE}" | jq '.projectStatus.conditions'
            exit 1  # üí• Fuerza el fallo del job
          fi

  deploy:
      name: üöÄ Deploy S3 + CodeDeploy
      runs-on: ubuntu-latest
      needs: sonarqube
      steps:
        - name: üì• Checkout del c√≥digo
          uses: actions/checkout@v3

        - name: üîß Configurar Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 18

        - name: üì¶ Instalar dependencias
          run: npm ci

        - name: üõ†Ô∏è Compilar aplicaci√≥n Angular
          run: npm run build -- --verbose

        - name: üìÅ Empaquetar archivos del build (build.zip para CodeDeploy)
          run: |
            cd dist/appTareas/browser
            zip -r ../../../build.zip .
            cd ../../../

        - name: üöÄ Subir a S3 
          uses: jakejarvis/s3-sync-action@master
          with:
            args: --delete
          env:
            AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: 'us-west-2'
            SOURCE_DIR: 'dist/appTareas/browser'

        - name: üì§ Subir build.zip para CodeDeploy
          run: aws s3 cp build.zip s3://${{ secrets.AWS_S3_BUCKET }}/build.zip
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: 'us-west-2'

        - name: üõ°Ô∏è Asumir temporalmente el rol IAM para CodeDeploy (CodeDeploy-rol)
          id: assume-role
          run: |
            echo "üîê Asumiendo el rol IAM de CodeDeploy..."
            ASSUMED_ROLE=$(aws sts assume-role \
              --role-arn ${{ secrets.CODEDEPLOY_ROLE_ARN }} # üè¢ ARN --> arn:aws:iam::123456789012
              --role-session-name deploySession)

            export AWS_ACCESS_KEY_ID=$(echo $ASSUMED_ROLE | jq -r '.Credentials.AccessKeyId')
            export AWS_SECRET_ACCESS_KEY=$(echo $ASSUMED_ROLE | jq -r '.Credentials.SecretAccessKey')
            export AWS_SESSION_TOKEN=$(echo $ASSUMED_ROLE | jq -r '.Credentials.SessionToken')

            echo "‚úÖ Rol asumido correctamente."
            
             # üëâ Guardar las credenciales como outputs para usarlas luego
            echo "AWS_ACCESS_KEY_ID=$(echo $ASSUMED_ROLE | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=$(echo $ASSUMED_ROLE | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
            echo "AWS_SESSION_TOKEN=$(echo $ASSUMED_ROLE | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

        - name: üöÄ Desplegar con AWS CodeDeploy v√≠a AWS CLI
          id: deploy
          run: |
            DEPLOYMENT_ID=$(aws deploy create-deployment \
              --application-name AppTareas \
              --deployment-group-name GrupoDeploy-EC2 \
              --deployment-config-name CodeDeployDefault.OneAtATime \
              --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},key=build.zip,bundleType=zip \
              --region us-west-2 \
              --query "deploymentId" --output text)

            echo "deployment_id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: 'us-west-2'

        - name: üîç Monitorear estado del despliegue
          run: |
            DEPLOYMENT_ID=${{ steps.deploy.outputs.deployment_id }}
            echo "‚è≥ Esperando a que finalice el despliegue ID: $DEPLOYMENT_ID"

            STATUS="InProgress"
            while [[ "$STATUS" == "InProgress" || "$STATUS" == "Created" ]]; do
              STATUS=$(aws deploy get-deployment \
                --deployment-id $DEPLOYMENT_ID \
                --region us-west-2 \
                --query "deploymentInfo.status" --output text)

              echo "‚û° Estado actual: $STATUS"
              sleep 10
            done

            if [ "$STATUS" = "Succeeded" ]; then
              echo "‚úÖ ¬°Despliegue COMPLETADO correctamente!"
            else
              echo "‚ùå Despliegue FALL√ì. Estado final: $STATUS"
              exit 1
            fi
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: 'us-west-2'