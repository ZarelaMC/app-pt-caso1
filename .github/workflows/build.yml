name: An√°lisis CI con SonarCloud y Deploy (CD) S3

on:
  push:
    branches:
      - master
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: üîç SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout del c√≥digo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üì¶ Instalar dependencias
        run: npm ci

      - name: üß™ Ejecutar pruebas y cobertura con Karma
        run: |
          chmod +x node_modules/.bin/karma
          npm run test -- --no-watch --code-coverage --browsers=ChromeHeadless

      - name: üîç An√°lisis SonarCloud
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

      - name: ‚úÖ Validar Quality Gate de SonarCloud
        run: |
          RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}")
          STATUS=$(echo "${RESPONSE}" | jq -r '.projectStatus.status')
          if [ "$STATUS" != "OK" ]; then
            echo "‚ùå Quality Gate fallido"
            echo "${RESPONSE}" | jq '.projectStatus.conditions'
            exit 1
          fi

  deploy:
    name: üöÄ Deploy S3 + CodeDeploy
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - name: üì• Checkout del c√≥digo
        uses: actions/checkout@v3

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üì¶ Instalar dependencias
        run: npm ci

      - name: üõ†Ô∏è Compilar aplicaci√≥n Angular
        run: npm run build -- --verbose

      - name: üìÅ Crear build.zip
        run: |
          cd dist/appTareas/browser
          zip -r ../../../../build.zip .
          cd ../../../../

      - name: üì§ Subir build.zip a S3
        run: aws s3 cp build.zip s3://${{ secrets.AWS_S3_BUCKET }}/build.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-2

      - name: üîê Asumir rol IAM (CodeDeploy)
        id: assume-role
        run: |
          echo "üîê Asumiendo el rol IAM..."
          ROLE=$(aws sts assume-role \
            --role-arn "${{ secrets.CODEDEPLOY_ROLE_ARN }}" \
            --role-session-name deploySession)

          echo "AWS_ACCESS_KEY_ID=$(echo $ROLE | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $ROLE | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $ROLE | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: üöÄ Desplegar con CodeDeploy
        id: deploy
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name AppTareas \
            --deployment-group-name GrupoDeploy-EC2 \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},key=build.zip,bundleType=zip \
            --region us-west-2 \
            --query "deploymentId" --output text)

          echo "deployment_id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT

      - name: üîç Monitorear despliegue
        run: |
          DEPLOYMENT_ID=${{ steps.deploy.outputs.deployment_id }}
          STATUS="InProgress"
          while [[ "$STATUS" == "InProgress" || "$STATUS" == "Created" ]]; do
            STATUS=$(aws deploy get-deployment \
              --deployment-id $DEPLOYMENT_ID \
              --region us-west-2 \
              --query "deploymentInfo.status" --output text)
            echo "‚û° Estado: $STATUS"
            sleep 10
          done

          if [ "$STATUS" = "Succeeded" ]; then
            echo "‚úÖ ¬°Despliegue COMPLETADO!"
          else
            echo "‚ùå Despliegue fallido: $STATUS"
            exit 1
          fi
